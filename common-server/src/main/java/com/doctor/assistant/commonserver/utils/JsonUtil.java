package com.doctor.assistant.commonserver.utils;import com.fasterxml.jackson.annotation.JsonInclude;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.JavaType;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.util.StringUtils;import java.util.ArrayList;import java.util.List;public class JsonUtil {    // 定义jackson对象    private static final ObjectMapper MAPPER = new ObjectMapper();    static {        MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);        //设置输入时忽略JSON字符串中存在而Java对象实际没有的属性        MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);    }    /**     * 将对象转换成json字符串。     * @param data     * @return     */    public static String objectToJson(Object data) {        try {            String string = MAPPER.writeValueAsString(data);            return string;        } catch (JsonProcessingException e) {            e.printStackTrace();        }        return null;    }    /**     * 将json结果集转化为对象     *     * @param jsonData json数据     * @param beanType 对象中的object类型     * @return     */    public static <T> T jsonToPojo(String jsonData, Class<T> beanType) {        try {            T t = MAPPER.readValue(jsonData, beanType);            return t;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    /**     * 将json数据转换成pojo对象list     * <p>Title: jsonToList</p>     * <p>Description: </p>     * @param jsonData     * @param beanType     * @return     */    public static <T> List<T> jsonToList(String jsonData, Class<T> beanType) {        JavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);        try {            List<T> list = MAPPER.readValue(jsonData, javaType);            return list;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static String object2Json(Object o) {        if (o == null) {            return null;        }        String s = null;        try {            s = MAPPER.writeValueAsString(o);        } catch (Exception e) {            e.printStackTrace();        }        return s;    }    public static <T> List<String> listObject2ListJson(List<T> objects) {        if (objects == null) {            return null;        }        List<String> lists = new ArrayList<String>();        for (T t : objects) {            lists.add(JsonUtil.object2Json(t));        }        return lists;    }    public static <T> List<T> listJson2ListObject(List<String> jsons, Class<T> c) {        if (jsons == null) {            return null;        }        List<T> ts = new ArrayList<T>();        for (String j : jsons) {            ts.add(JsonUtil.json2Object(j, c));        }        return ts;    }    public static <T> T json2Object(String json, Class<T> c) {        if (StringUtils.hasLength(json) == false) {            return null;        }        T t = null;        try {            t = MAPPER.readValue(json, c);        } catch (Exception e) {            e.printStackTrace();        }        return t;    }    @SuppressWarnings("unchecked")    public static <T> T json2Object(String json, TypeReference<T> tr) {        if (StringUtils.hasLength(json) == false) {            return null;        }        T t = null;        try {            t = (T) MAPPER.readValue(json, tr);        } catch (Exception e) {            e.printStackTrace();        }        return (T) t;    }}