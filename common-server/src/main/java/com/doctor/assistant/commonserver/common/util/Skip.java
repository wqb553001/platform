package com.doctor.assistant.commonserver.common.util;import lombok.Data;import java.util.concurrent.Callable;import java.util.concurrent.Executors;import java.util.concurrent.Future;public class Skip {    private int index;    private Node node;    private Node insert(int value){        if(node == null) {            node.value = value;            node.size = 1;            return this.node;        }        if(value < node.value){            Node newNode = new Node(value);            Node before = node.before;            Node bottom = node.bottom;            before.after = newNode;            newNode.after = node;        }        return this.node;    }    private boolean isExist(){        Executors.newSingleThreadExecutor();        Future<String> result = null;        Callable callable = null;        return false;    }    @Data    private class Node{        private int index;        private Node before;        private Node after;        private Node bottom;        private int value;        private int size;        public Node(){}        public Node(int value){            this.value = value;        }    }}