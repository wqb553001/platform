package com.doctor.assistant.scheduleserver.manager;import org.quartz.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Map;/** * 定时任务管理类 * */public class QuartzHandler {    private static final Logger logger = LoggerFactory.getLogger(QuartzHandler.class);    /**     * 删除job     *     * @param triggerName  触发器名称     * @param triggerGroup 触发器分组     * @param jobName      任务名称     * @param jobGroup     任务分组     * @throws SchedulerException     */    public void deleteJob(Scheduler scheduler, String triggerName, String triggerGroup, String jobName, String jobGroup) throws SchedulerException {        TriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroup);        scheduler.pauseTrigger(triggerKey);        scheduler.unscheduleJob(triggerKey);        JobKey jobKey = JobKey.jobKey(jobName, jobGroup);        scheduler.deleteJob(jobKey);    }    /**     * 修改定时任务     *     * @param oldTriggerKey 需要修改的TriggerKey 也就是唯一标识     * @param cron          新的cron表达式     */    public void updateJob(Scheduler scheduler, TriggerKey oldTriggerKey, String cron) {        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(cron);        CronTrigger cronTrigger = TriggerBuilder.newTrigger()                .withIdentity(oldTriggerKey).withSchedule(scheduleBuilder).build();        try {            scheduler.rescheduleJob(oldTriggerKey, cronTrigger);        } catch (SchedulerException e) {            e.printStackTrace();        }    }    /**     * 新增job任务     *     * @param jobName          job名称     * @param jobGroupName     job分组名称     * @param triggerName      触发器名称     * @param triggerGroupName 触发器分组名称     * @param jobClass         需要执行的job.class     * @param cron             cron 表达式     * @throws SchedulerException     */    public void addJob(Scheduler scheduler, String jobName, String jobGroupName,                       String triggerName, String triggerGroupName, Class jobClass, String cron) throws SchedulerException {        this.addJob(scheduler, jobName, jobGroupName, triggerName, triggerGroupName, cron, jobClass, null);    }    /**     * 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名  （带参数）     *     * @param jobName          job名称     * @param jobGroupName     job分组名称     * @param triggerName      触发器名称     * @param triggerGroupName 触发器分组名称     * @param jobClass         需要执行的job.class     * @param cron             cron 表达式     * @param parameter        传输数据     */    public void addJob(Scheduler scheduler, String jobName, String jobGroupName, String triggerName, String triggerGroupName, String cron,                       Class<? extends Job> jobClass, Map<String, Object> parameter) throws SchedulerException {        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();    //用于描叙Job实现类及其他的一些静态信息，构建一个作业实例        if(parameter != null) jobDetail.getJobDataMap().put("parameterList", parameter);    //传参数        Trigger trigger = TriggerBuilder.newTrigger().withIdentity(triggerName, triggerGroupName)                .withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();        scheduler.scheduleJob(jobDetail, trigger);        logger.info("Job add Success ! job名称="+jobName                +",job分组名称="+jobGroupName                +",触发器名称="+triggerName                +",触发器分组名称="+triggerGroupName                +",需要执行的job.class="+jobClass                +",cron 表达式="+cron+"" +                ", 传输数据="+parameter);    }//    private static SchedulerFactory gSchedulerFactory = new StdSchedulerFactory();//    private static String JOB_GROUP_NAME = "EXTJWEB_JOBGROUP_NAME";//    private static String TRIGGER_GROUP_NAME = "EXTJWEB_TRIGGERGROUP_NAME";////    /**//     * 添加一个定时任务，使用默认的任务组名，触发器名，触发器组名//     *//     * @param jobName//     *            任务名//     * @param jobClass//     *            任务//     * @param time//     *            时间设置，参考quartz说明文档//     * @throws SchedulerException//     * @throws ParseException//     *///    public static void addJob(String jobName, String jobClass, String time) {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            JobDetail jobDetail = new JobDetail(jobName, JOB_GROUP_NAME, Class.forName(jobClass));// 任务名，任务组，任务执行类//            // 触发器//            CronTrigger trigger = new CronTrigger(jobName, TRIGGER_GROUP_NAME);// 触发器名,触发器组//            trigger.setCronExpression(time);// 触发器时间设定//            sched.scheduleJob(jobDetail, trigger);//            // 启动//            if (!sched.isShutdown()){//                sched.start();//            }//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 添加一个定时任务//     *//     * @param jobName//     *            任务名//     * @param jobGroupName//     *            任务组名//     * @param triggerName//     *            触发器名//     * @param triggerGroupName//     *            触发器组名//     * @param jobClass//     *            任务//     * @param time//     *            时间设置，参考quartz说明文档//     * @throws SchedulerException//     * @throws ParseException//     *///    public static void addJob(String jobName, String jobGroupName,//            String triggerName, String triggerGroupName, String jobClass, String time){//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            JobDetail jobDetail = new JobDetail(jobName, jobGroupName, Class.forName(jobClass));// 任务名，任务组，任务执行类//            // 触发器//            CronTrigger trigger = new CronTrigger(triggerName, triggerGroupName);// 触发器名,触发器组//            trigger.setCronExpression(time);// 触发器时间设定//            sched.scheduleJob(jobDetail, trigger);//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 修改一个任务的触发时间(使用默认的任务组名，触发器名，触发器组名)//     *//     * @param jobName//     * @param time//     *///    public static void modifyJobTime(String jobName, String time) {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            CronTrigger trigger = (CronTrigger) sched.getTrigger(jobName, TRIGGER_GROUP_NAME);//            if(trigger == null) {//                return;//            }//            String oldTime = trigger.getCronExpression();//            if (!oldTime.equalsIgnoreCase(time)) {//                JobDetail jobDetail = sched.getJobDetail(jobName, JOB_GROUP_NAME);//                Class objJobClass = jobDetail.getJobClass();//                String jobClass = objJobClass.getName();//                removeJob(jobName);////                addJob(jobName, jobClass, time);//            }//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 修改一个任务的触发时间//     *//     * @param triggerName//     * @param triggerGroupName//     * @param time//     *///    public static void modifyJobTime(String triggerName,//            String triggerGroupName, String time) {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            CronTrigger trigger = (CronTrigger) sched.getTrigger(triggerName, triggerGroupName);//            if(trigger == null) {//                return;//            }//            String oldTime = trigger.getCronExpression();//            if (!oldTime.equalsIgnoreCase(time)) {//                CronTrigger ct = (CronTrigger) trigger;//                // 修改时间//                ct.setCronExpression(time);//                // 重启触发器//                sched.resumeTrigger(triggerName, triggerGroupName);//            }//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 移除一个任务(使用默认的任务组名，触发器名，触发器组名)//     *//     * @param jobName//     *///    public static void removeJob(String jobName) {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            sched.pauseTrigger(jobName, TRIGGER_GROUP_NAME);// 停止触发器//            sched.unscheduleJob(jobName, TRIGGER_GROUP_NAME);// 移除触发器//            sched.deleteJob(jobName, JOB_GROUP_NAME);// 删除任务//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 移除一个任务//     *//     * @param jobName//     * @param jobGroupName//     * @param triggerName//     * @param triggerGroupName//     *///    public static void removeJob(String jobName, String jobGroupName,//            String triggerName, String triggerGroupName) {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            sched.pauseTrigger(triggerName, triggerGroupName);// 停止触发器//            sched.unscheduleJob(triggerName, triggerGroupName);// 移除触发器//            sched.deleteJob(jobName, jobGroupName);// 删除任务//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 启动所有定时任务//     *///    public static void startJobs() {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            sched.start();//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }////    /**//     * 关闭所有定时任务//     *///    public static void shutdownJobs() {//        try {//            Scheduler sched = gSchedulerFactory.getScheduler();//            if(!sched.isShutdown()) {//                sched.shutdown();//            }//        } catch (Exception e) {//            e.printStackTrace();//            throw new RuntimeException(e);//        }//    }}