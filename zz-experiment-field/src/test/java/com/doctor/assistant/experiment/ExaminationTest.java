package com.doctor.assistant.experiment;public class ExaminationTest {    public static void main(String[] args) {//        test1();    // question 1//        test2();    // question 2//        test3();    // question 3    }    public static void test1(){        String str = "how are you";//        String str = " how are you ";        replace(str);    }    public static void test2(){        NumberNode x11 = new NumberNode(3, null);        NumberNode x12 = new NumberNode(6, x11);        NumberNode headX = new NumberNode(4, x12);        NumberNode y11 = new NumberNode(7, null);        NumberNode y12 = new NumberNode(8, y11);        NumberNode headY = new NumberNode(9, y12);//        NumberNode calculationLinkedX = calculationLinked(headX, headY);//        print(calculationLinkedX);        // 以下为：结果反转为整数形式//        int reversal = reversal(calculationLinkedX);//        System.out.println("结果：" + reversal);        // 另外一组测试数据        NumberNode a25 = new NumberNode(6, null);        NumberNode a24 = new NumberNode(6, a25);        NumberNode d23 = new NumberNode(6, a24);        NumberNode c22 = new NumberNode(9, d23);        NumberNode headA = new NumberNode(8, c22);        NumberNode a32 = new NumberNode(8, null);        NumberNode a22 = new NumberNode(7, a32);        NumberNode a11 = new NumberNode(5, a22);        NumberNode headB = new NumberNode(1, a11);        // 另外一组测试数据        NumberNode calculationLinkeA = calculationLinked(headA, headB);        print(calculationLinkeA);        // 以下为：结果反转为整数形式        int reversal = reversal(calculationLinkeA);        System.out.println("正整数：" + reversal);    }    public static void test3(){//        int number = 4;        int number = 5;        System.out.println(upStar(number));    }    // question 1    private static void replace(String str){        StringBuilder strB = new StringBuilder();        for (Character chara: str.toCharArray()) {            if(!String.valueOf(chara).equals(" ")){                strB.append(chara);            }else{                strB.append("%20");            }        }        System.out.println("替换结果为：" + strB.toString());    }    // question 2    private static NumberNode calculationLinked(NumberNode a, NumberNode b){        NumberNode result = new NumberNode(0, null);        if(a == null && b == null){            return result;        }        if(b == null){            return a;        }        if(a == null){            return b;        }        return plus(a, b, result);    }    private static NumberNode plus(NumberNode a, NumberNode b, NumberNode result){        NumberNode tail = result;        while (tail.next != null){            tail = tail.next;        }        NumberNode next = new NumberNode(0, null);;        int headValue = a.value + b.value;        int nextV = 0;        int currentV = headValue;        if(headValue >= 10){            currentV = headValue - 10;            nextV = 1;            next = new NumberNode(nextV, null);        }        tail.value += currentV;        tail.next = next;        if(a.next == null && b.next == null){            return result;        }        if(a.next != null && b.next != null){            result = plus(a.next, b.next, result);        }        if(a.next == null){            tail.next = b.next;        }        if(b.next == null){            tail.next = a.next;        }        return result;    }    private static int reversal(NumberNode numberNode){        if(numberNode == null){            return 0;        }        NumberNode next = numberNode;        String result = numberNode.value+"";        while (next.next != null){            next = next.next;            result = next.value+""+result;        }        return Integer.valueOf(result);    }    // 正向打印链表    private static void print(NumberNode a){        System.out.print("链表：");        if(a == null){            System.out.print(0);            return;        }        System.out.print(a.value + " -> ");        NumberNode next = a;        while (next.next != null){            System.out.print(next.next.value);            next = next.next;            System.out.print(" -> ");        }        System.out.print("null");        System.out.println();    }    static class NumberNode{        NumberNode next;        int value;        public NumberNode() {}        public NumberNode(int value, NumberNode next) {            this.next = next;            this.value = value;        }        public boolean isTail(){            if(this.next == null){                return true;            }            return false;        }    }    // question 3    private static int upStar(int number){        // f(n) = f(n-1) + f(n-2) + f(n-3)//        1（1）//        2（1+1）+（2）//        3（1,1,1）+（1,2）+（2,1）+（3）//        4（1,1,1,1）+（2,2）+（2,1,1）+（1,2,1）+（1,1,2）+（1,3）+（3,1）//        5（1,1,1,1,1）+（2,1,1,1）+（1,2,1,1）+（1,1,2,1）+（1,1,1,2）+（2,2,1）+（2,1,2）+（1,2,2）+（3,2）+（2,3）+（3,1,1）+（1,3,1）+（1,1,3）        if(number == 1 || number == 2) return number;        if(number == 3) return 4;        return upStar(number  - 1) + upStar(number - 2) + upStar(number - 3);    }}