package com.doctor.assistant.experiment.czy.poi.excel.utils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.util.CollectionUtils;import javax.validation.ConstraintViolation;import javax.validation.Validation;import javax.validation.Validator;import java.util.ArrayList;import java.util.List;import java.util.Set;public class ValidatorUtils {    private static final Logger logger = LoggerFactory.getLogger(ValidatorUtils.class);    private static Validator validator;    static {        validator = Validation.buildDefaultValidatorFactory().getValidator();    }    /**     * 校验对象     * @param object        待校验对象     * @param groups        待校验的组     * @throws RRException  校验不通过，记录 RRException 异常日志，不抛异常，继续校验     */    public static Object validateEntity(Object object, Class<?>... groups)            throws RRException {        if(validate(object, groups)!=null){            return object;        }        return null;    }    /**     * 校验对象     * @param object        待校验对象     * @param groups        待校验的组     * @throws RRException  校验不通过，记录 RRException 异常日志，不抛异常，继续校验     */    public static List validateEntityList(Object object, Class<?>... groups)            throws RRException {        List validated = new ArrayList();        if (object != null && object instanceof List){            List list = (List)object;            if(!CollectionUtils.isEmpty(list)){                for (Object obj : list) {                    if(validate(obj, groups) != null){                        validated.add(obj);                    }                }                return validated;            }        }        return null;    }    /**     * 校验对象     * @param object        待校验对象     * @param groups        待校验的组     * @throws RRException  校验不通过，记录 RRException 异常日志，不抛异常，继续校验     */    public static Object validateObject(Object object, Class<?>... groups)            throws RRException {        Object validateObjec;        if (object != null && object instanceof List){            List list = (List)object;            if(!CollectionUtils.isEmpty(list)){                List validated = new ArrayList();                while (list.iterator().hasNext()){                    validateObjec = list.iterator().next();                    if(validate(validateObjec, groups)!=null){                        validated.add(validateObjec);                    }                }                return validated;            }        }else{            if(validate(object, groups)!=null){                return object;            }        }        return null;    }    /**     * 校验对象     * @param object        待校验对象     * @param groups        待校验的组     * @throws RRException  校验不通过，则报RRException异常     */    public static void validateEntityListExceptionThrows(Object object, Class<?>... groups)            throws RRException {        Object validateObjec;        if (object instanceof List){            List list = (List)object;            while (list.iterator().hasNext()){                validateObjec = list.iterator().next();                validateExceptionThrows(validateObjec, groups);            }        }else{            validateExceptionThrows(object, groups);        }    }    // 数据校验不通过，只打印未通过日志，不抛异常，继续校验    private static Object validate(Object object, Class<?>... groups){        try {            validateExceptionThrows(object, groups);        }catch (RRException rre){            logger.error(rre.getMsg(), rre);            return null;        }        return object;    }    // 数据校验不通过，抛异常，停止校验    private static void validateExceptionThrows(Object object, Class<?>... groups) throws RRException{        Set<ConstraintViolation<Object>> constraintViolations = validator.validate(object, groups);        if (!constraintViolations.isEmpty()) {            StringBuilder msg = new StringBuilder();            for (ConstraintViolation<Object> constraint : constraintViolations) {                msg.append(constraint.getMessage()).append("<br>");            }            throw new RRException(msg.toString());        }    }}