package com.doctor.assistant.experiment.czy.core;import com.doctor.assistant.experiment.czy.MQ.Sender;import com.doctor.assistant.experiment.czy.config.RabbitMQConfig;import com.doctor.assistant.experiment.czy.entity.EvalInputMessage;import com.doctor.assistant.experiment.czy.poi.excel.utils.ValidatorUtils;import com.doctor.assistant.experiment.czy.repository.EvalInputMessageRepository;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Callable;import java.util.stream.Collectors;/** * 引接数据 */@Componentpublic class PullData implements Callable<List<EvalInputMessage>> {    private static final Logger logger = LoggerFactory.getLogger(PullData.class);    @Autowired    private Sender sender;    @Autowired    VRSystem vrSystem;    @Autowired    EvalInputMessageRepository evalInputMessageRepository;    @Override    public List<EvalInputMessage> call() {        logger.info("引接数据: in ....{}", this.getClass().getName());        List<EvalInputMessage> dataFromFile = vrSystem.getDataFromFile(null);        List<EvalInputMessage> newData = new ArrayList<>();        List<EvalInputMessage> validatedData = new ArrayList<>();        // 筛选出 新数据        // 这里需要考虑 当数据量大时，（1）采用批量查询；（2）单取 kpi，两个 kpi集合比较 取 none-existed        newData = dataFromFile.stream().filter(f -> {            EvalInputMessage evalInputMessage = evalInputMessageRepository.findByMessageId(f.getMessageId());            if(evalInputMessage == null){                f.setStatue(0);                return true;            }else{                return false;            }        }).collect(Collectors.toList());        validatedData = this.validationAndPreHandler(newData);        if(!CollectionUtils.isEmpty(validatedData)){            logger.info("引接数据: 有效数据入库....");            this.evalInputMessageRepository.saveAll(validatedData);            validatedData.stream().forEach(input ->{                String messageName = input.getMessageName();                if(StringUtils.isNotBlank(messageName)){                    logger.info("引接数据: 通知数据接入，sendMessage : {}，{}", messageName, this.getClass().getName() );                    sender.send(RabbitMQConfig.newDataInput, messageName);                }            });        }else{            String message = "引接数据: 无有效的新数据需要入库....";            logger.info(message);            sender.send(RabbitMQConfig.schedule, message);        }        logger.info("引接数据: out ....{}", this.getClass().getName());        return validatedData;    }    /**     * 预处理     */    public List<EvalInputMessage> validationAndPreHandler(List<EvalInputMessage> evalInputMessages) {        List<EvalInputMessage> validatedData = new ArrayList<>();            // 数据校验        Object validatedObject = ValidatorUtils.validateEntityList(evalInputMessages, EvalInputMessage.class);        if (validatedData != null && validatedData instanceof List) {            validatedData = (List<EvalInputMessage>) validatedObject;        }        return validatedData;    }}