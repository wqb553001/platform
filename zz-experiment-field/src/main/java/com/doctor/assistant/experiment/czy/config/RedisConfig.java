package com.doctor.assistant.experiment.czy.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.cache.RedisCacheManager.RedisCacheManagerBuilder;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.*;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.RedisSerializationContext;import org.springframework.data.redis.serializer.StringRedisSerializer;import java.time.Duration;/** * <p>StringBoot 封装了  RedisTemplate 对象来操作 Redis， 并在RedisAutoConfiguration下配置的两个RedisTemplate</p> * <p>RedisTemplate<Object, Object>: key(Object) --> value(Object)</p> * <p>StringRedisTemplate: key(String) --> value(Object)</p> * <p>RedisTemplate<Object, Object>, key, value需要实现Serializable接口，redis数据格式比较难懂</p> * <p>StringRedisTemplate: 即RedisTemplate<String, String>, 若value存储对象时，需要转为string，一般转为JSON格式的字符串</p> * <p>可以配置一个 RedisTemplate<String, Object> 的bean，key设置为String格式，value设置自动转为JSON格式</p> * * @see org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration */@Configuration@EnableCachingpublic class RedisConfig {    /**     * <p>SpringBoot配置redis作为默认缓存工具</p>     * <p>SpringBoot 2.0 以上版本的配置</p>     */    @Bean    public CacheManager cacheManager(RedisTemplate<String, Object> template) {        RedisCacheConfiguration defaultCacheConfiguration =                RedisCacheConfiguration                        .defaultCacheConfig()                        // 设置key为String                        .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(template.getStringSerializer()))                        // 设置value 为自动转Json的Object                        .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(template.getValueSerializer()))                        // 不缓存null                        .disableCachingNullValues()                        // 缓存数据保存1小时                        .entryTtl(Duration.ofHours(1));        RedisCacheManager redisCacheManager =                RedisCacheManagerBuilder                        // Redis 连接工厂                        .fromConnectionFactory(template.getConnectionFactory())                        // 缓存配置                        .cacheDefaults(defaultCacheConfiguration)                        // 配置同步修改或删除 put/evict                        .transactionAware()                        .build();        return redisCacheManager;    }    /**     * retemplate<String, Object>     */    @Bean(name = "template")    public RedisTemplate<String, Object> template(RedisConnectionFactory factory) {        // 创建RedisTemplate<String, Object>对象        RedisTemplate<String, Object> template = new RedisTemplate<>();        // 配置连接工厂        template.setConnectionFactory(factory);        // 定义Jackson2JsonRedisSerializer序列化对象        Jackson2JsonRedisSerializer<Object> jacksonSeial = new Jackson2JsonRedisSerializer<>(Object.class);        ObjectMapper om = new ObjectMapper();        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会报异常        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jacksonSeial.setObjectMapper(om);        StringRedisSerializer stringSerial = new StringRedisSerializer();        // redis key 序列化方式使用stringSerial        template.setKeySerializer(stringSerial);        // redis value 序列化方式使用jackson        template.setValueSerializer(jacksonSeial);        // redis hash key 序列化方式使用stringSerial        template.setHashKeySerializer(stringSerial);        // redis hash value 序列化方式使用jackson        template.setHashValueSerializer(jacksonSeial);        template.afterPropertiesSet();        return template;    }    /**     * redis string     */    @Bean    public ValueOperations<String, Object> valueOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForValue();    }    /**     * redis hash     */    @Bean    public HashOperations<String, String, Object> hashOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForHash();    }    /**     * redis list     */    @Bean    public ListOperations<String, Object> listOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForList();    }    /**     * redis set     */    @Bean    public SetOperations<String, Object> setOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForSet();    }    /**     * redis zset     */    @Bean    public ZSetOperations<String, Object> zSetOperations(RedisTemplate<String, Object> redisTemplate) {        return redisTemplate.opsForZSet();    }}