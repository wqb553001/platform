package com.doctor.assistant.experiment.czy.controller;import com.doctor.assistant.experiment.czy.MQ.DispatcherCoreReceiver;import com.doctor.assistant.experiment.czy.config.RabbitMQConfig;import com.doctor.assistant.experiment.czy.core.PullData;import com.doctor.assistant.experiment.czy.entity.EvalInputMessage;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.CollectionUtils;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.net.URISyntaxException;import java.util.List;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@RestController@RequestMapping("/schedule")@RabbitListener(queues = RabbitMQConfig.schedule)public class ScheduleCentre {    private static final Logger logger = LoggerFactory.getLogger(ScheduleCentre.class);    static ExecutorService executorService = Executors.newSingleThreadExecutor();	//创建一个单线程执行器    @Autowired    PullData dataInput;    @Autowired    DispatcherCoreReceiver calculateReceiver;    @RequestMapping("/call")    public String runDataInput() throws ExecutionException, InterruptedException {        // 数据引接：循环获取数·据        List<EvalInputMessage> evalInputMessages = executorService.submit(dataInput).get();        if(!CollectionUtils.isEmpty(evalInputMessages))            evalInputMessages.stream().forEach(System.out::println);        return "SUCCESS";    }    @RabbitHandler    public void process(String message) throws URISyntaxException {        logger.info("调度中心：接收到通知 ===" + RabbitMQConfig.schedule + "-Receiver:" + message);    }}