package com.doctor.assistant.experiment.czy.core;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.doctor.assistant.experiment.czy.constant.DataSrcTypeEnum;import com.doctor.assistant.experiment.czy.entity.EvalInputMessage;import com.doctor.assistant.experiment.czy.poi.excel.entity.params.ImportParams;import com.doctor.assistant.experiment.czy.poi.excel.utils.ExcelImportUtil;import com.doctor.assistant.experiment.czy.repository.EvalInputMessageRepository;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.Collections;import java.util.List;@Servicepublic class VRSystem {    private static final Logger logger = LoggerFactory.getLogger(VRSystem.class);    @Autowired    EvalInputMessageRepository evalInputMessageRepository;    /**     * 从 文件 读取数据     *     * @param path 文件路径     * @return     */    public List<EvalInputMessage> getDataFromFile(String path) {        List<EvalInputMessage> list = new ArrayList<>();        try {            if(StringUtils.isBlank(path)){                path = "C:\\Users\\Administrator\\Desktop\\file-test.xls";                logger.debug("未传入文件路径名，采用默认路径："+path);            }            File file = new File(path);            if (!file.isFile()){                path = "C:\\Users\\Administrator\\Desktop\\file-test.xls";                file = new File(path);                logger.debug("传入文件路径无效，读取默认路径下的文件："+path);            }            FileInputStream input = new FileInputStream(file);            ImportParams params = new ImportParams();            params.setTitleRows(2);            params.setHeadRows(2);            params.setNeedSave(true);            list =  ExcelImportUtil.importExcel(input, EvalInputMessage.class, params);            final String fileName = file.getName();            this.flagDataSrc(list, DataSrcTypeEnum.FILE.val(), fileName);        }catch (Exception e){            logger.error(e.getMessage(), e);        }        return this.checkResult(list);    }    /**     * 从 消息队列 获取数据     *     * @param jsonObjectStr 消息体     * @return     */    public List<EvalInputMessage> getDataFromMessageQueue(String jsonObjectStr){        List<EvalInputMessage> list = Collections.EMPTY_LIST;        try {            list = this.jsonStrConvertToEntity(jsonObjectStr);            this.flagDataSrc(list, DataSrcTypeEnum.MQ.val(), null);        }catch (Exception e){            logger.error(e.getMessage(), e);        }        return this.checkResult(list);    }    /**     * 从数据表 OR 视图 获取数据     *     * @return     */    public List<EvalInputMessage> getDataFromTableOrView(){        List<EvalInputMessage> list = Collections.EMPTY_LIST;        try {            // TODO: 从数据表 OR 视图 中获取的数据源//            list = this.evalInputMessageRepository.findAllByMessageNameNotNull();            this.flagDataSrc(list, DataSrcTypeEnum.TABLE.val(), null);        }catch (Exception e){            logger.error(e.getMessage(), e);        }        return this.checkResult(list);    }    /**     * VR 仿真系统，获取所有数据     * @param path  文件路径     * @param jsonObjectStr "{key:value}"     * @return     */    public List<EvalInputMessage> getAllData(String path, String jsonObjectStr) {        List<EvalInputMessage> inputMessageFromFile = this.getDataFromFile(path);        List<EvalInputMessage> inputMessageFromMessageQueue = this.getDataFromMessageQueue(jsonObjectStr);        List<EvalInputMessage> inputMessageFromTableOrView = this.getDataFromTableOrView();        int allSize = inputMessageFromFile.size() + inputMessageFromMessageQueue.size() + inputMessageFromTableOrView.size();        List<EvalInputMessage> all = new ArrayList<>(allSize);        all.addAll(inputMessageFromFile);        all.addAll(inputMessageFromMessageQueue);        all.addAll(inputMessageFromTableOrView);        if(!CollectionUtils.isEmpty(all)){            this.evalInputMessageRepository.saveAll(all);        }        return this.checkResult(all);    }    private List<EvalInputMessage> checkResult(List<EvalInputMessage> input){        if(input == null){            input = new ArrayList<>();        }        return input;    }    private void flagDataSrc(List<EvalInputMessage> list, Integer type, String fileName){        if(!CollectionUtils.isEmpty(list)){            list.stream().forEach(a -> {                if(StringUtils.isNotBlank(fileName)){                    a.setInputFileName(fileName);                }                a.setType(type); // '1=文件，2=MQ，3=数据库视图，4=数据库表'            });        }    }    private List<EvalInputMessage> jsonStrConvertToEntity(String jsonObjectStr){        List<EvalInputMessage> list = new ArrayList<>();        if (StringUtils.isBlank(jsonObjectStr)){            return list;        }        Object parse = null;        try {            parse = JSON.parse(jsonObjectStr);        } catch (Exception e) {            return list;        }        if (parse instanceof JSONObject){            EvalInputMessage inputMessage = JSONObject.parseObject(jsonObjectStr, EvalInputMessage.class);            if(inputMessage != null){                list.add(inputMessage);            }        }else if (parse instanceof JSONArray){            list = JSONArray.parseArray(jsonObjectStr, EvalInputMessage.class);        }        return list;    }    public static boolean isJson(String str){        if (StringUtils.isBlank(str)){            return false;        }        Object parse = null;        try {            parse = JSON.parse(str);        } catch (Exception e) {            return false;        }        if (parse instanceof JSONObject || parse instanceof JSONArray){            return true;        }        return false;    }}