package com.activitiserver.server;import com.activitiserver.core.JdbcLocalUserDetailsManager;import com.activitiserver.feignclient.FeignUserService;import com.activitiserver.core.ActivitiHandler;import com.doctor.assistant.commonserver.utils.JsonUtil;import com.doctor.assistant.userserver.springdata.entity.TSUser;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;@Servicepublic class UserBridgeService {    private static final Logger logger = LoggerFactory.getLogger(UserBridgeService.class);    @Resource(name = "jdbcLocalUserDetailsManager")    JdbcLocalUserDetailsManager jdbcLocalUserDetailsManager;    @Autowired    FeignUserService feignUserService;    @Autowired    PasswordEncoder passwordEncoder;    private static String accountbookId = "2c91e3ec6ad89cfb016ae4657a010362"; 		// 110100掌上纵横    private static final String departDetailId = "2c91e3ec6ad89cfb016ae4657a0c0368";    private static final String GROUP_ = "GROUP_";    private static final String ROLE_ACTIVITI_USER = "ROLE_USER";    private static final String ROLE_ACTIVITI_ADMIN = "ROLE_ADMIN";    public void initAssumed(){        String userListJsonStr = feignUserService.userByDepartDetailIdAndAccountbookId(accountbookId, departDetailId);//        System.out.println(userListJsonStr);        List<TSUser> userList = JsonUtil.jsonToList(userListJsonStr, TSUser.class);        String[][] usersGroupsAndRoles = {                {"salaboy", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"ryandawsonuk", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"erdemedeiros", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"},                {"other", "password", "ROLE_ACTIVITI_USER", "GROUP_otherTeam"},                {"admin", "password", "ROLE_ACTIVITI_ADMIN"},        };        // e.g.        // user : {"salaboy", "password", "ROLE_ACTIVITI_USER", "GROUP_activitiTeam"}        // user[0]:"salaboy"; user[1]:"password"        boolean flag = true;        String accountbookName = "000000-company-test";        String departName = "000000-department-test";        for (TSUser user:userList){            this.createUser(user);        }    }    public void clearUsers(boolean isTruncate){        jdbcLocalUserDetailsManager.deleteUserAll(isTruncate);    }    private void createUser(TSUser user){        boolean flag = false;//        user.setUserDepartDetailSet(null);    // 测试空值情况//        user.getUserAccountbookSet().forEach(e ->{e.setAccountbook(null);});  // 测试空值情况        // 权限划分：角色保留（角色对应角色：ROLE_RoleName）；部门分组（公司名称+部门名称:GROUP_AccountbookName_DepartDetail.Depart.DepartName）        List<SimpleGrantedAuthority> simpleGrantedAuthorities = new ArrayList<>(user.getUserDepartDetailSet().size() + user.getRoleSet().size());        if(user.getUserAccountbookSet() != null && user.getUserDepartDetailSet() != null) {            flag = true;    // 存在 GROUP 权限组 待添加            simpleGrantedAuthorities = user.getUserDepartDetailSet().stream()                    .filter(udd ->{return (udd.getDepartDetail() != null && udd.getDepartDetail().getDepart() != null);})                    .map((udd) -> {                        return user.getUserAccountbookSet().stream()                                .filter((ua) -> {                                    return (ua.getAccountbook() != null) && StringUtils.equals(udd.getAccountbookId(), ua.getAccountbook().getId());                                })                                .map((ua) -> {                                    SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(GROUP_ + ua.getAccountbook().getAccountbookName() + "_" + udd.getDepartDetail().getDepart().getDepartName());                                    return simpleGrantedAuthority;                                }).collect(Collectors.toList());                    })                    .flatMap(List::stream).collect(Collectors.toList());        }        if(user.getRoleSet() != null) {            flag = true;    // 存在 ROLE 权限组 待添加            simpleGrantedAuthorities.addAll(user.getRoleSet().stream().map(role -> {                String roleName = ROLE_ACTIVITI_ADMIN;                if(role.getRoleName() == "一般员工") roleName = ROLE_ACTIVITI_USER;                SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(roleName);                return simpleGrantedAuthority;            }).collect(Collectors.toList()));        }        if(flag) {  // 存在 待添加的 权限组            String username = user.getEmpNo() + ActivitiHandler.Connector + user.getUserName();            logger.info("> Registering new user: " + username + " with the following Authorities[" + simpleGrantedAuthorities + "]");            jdbcLocalUserDetailsManager.createUser(new User(username, passwordEncoder.encode("password"),                    simpleGrantedAuthorities));        }    }    public void insertIntoAssumedTable(String empNo, String username){        boolean isExist = jdbcLocalUserDetailsManager.userExists(empNo + ActivitiHandler.Connector + username);        if(!isExist){            String userJsonStr = feignUserService.userByEmpNo(empNo);            TSUser user = JsonUtil.jsonToPojo(userJsonStr, TSUser.class);            if(user != null) this.createUser(user);        }    }    // 用于登录    public void initRootUsedToLogin(){        jdbcLocalUserDetailsManager.createUser(new User("root", passwordEncoder.encode("root"),                new ArrayList<SimpleGrantedAuthority>(){{add(new SimpleGrantedAuthority("GROUP_admin"));}}));    }}